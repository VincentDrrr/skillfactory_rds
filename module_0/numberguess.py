# -*- coding: utf-8 -*-
"""NumberGuess.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1woYYtnEQ7BPgDMjnGitsSiiHvXOZkOLh
"""

import numpy as np
def number_guessing_game(engine):
    "Функция содержащая параметры игры и загадывающая число"
    count = [] #Задаем начальный счетчик попыток
    global array_min #Объявляем мин и макс значения глобальными переменными
    global array_max
    array_min = 1 #Минимальное значение массива
    array_max = 100 #Максимальное значение массива
    iteration_count = 1000 #Параметр количества итераций
    np.random.seed(5)  #Указываем сид ГСЧ
    random_array = np.random.randint(array_min, array_max, size=(iteration_count))
    for random_number in random_array:
        count.append(engine(random_number))
    average_count = int(np.mean(count))
    print(f"Число в диапазоне от {array_min} до {array_max} за {iteration_count} итераций угадывается в среднем за {average_count} шагов")
    return(average_count)

def engine(random_number):
    "Функция принимает загаданное число, угадывает его и возвращает число попыток"
    count = 0 #Счетчик количества попыток
    left = array_min #Минимальное число диапазона поиска
    right = array_max #Максимальное число диапазона поиска
    predict = (left + right) // 2 #Первая попытка угадывания
    while predict != random_number:
        count += 1
        predict = (left + right) // 2
        if random_number > predict:
            print (f"Загаданное число ({random_number}) больше {predict}, попытка № {count}")
            left = predict + 1
            print (f"Тогда пусть будет {predict}")
        elif random_number < predict:
            print (f"Загаданное число ({random_number}) меньше {predict}, попытка № {count}")
            right = predict - 1
            print (f"Тогда пусть будет {predict}")
    print (f"Угадано за {count} попыток")
    return(count) #Выход из цикла после угадывания

number_guessing_game(engine) #Запусаем алгоритм с заданными параметрами